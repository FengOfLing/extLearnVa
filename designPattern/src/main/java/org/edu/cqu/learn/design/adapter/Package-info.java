package org.edu.cqu.learn.design.adapter;

/*
适配器模式

这次我要好好学习一下适配器模式

1，一种适配器模式，就是接口和父类的结合实现
比如，我现在想要实现一个接口
正常情况下，应该是 A 接口 被 B 类实现了
然后，如果我要修改的话，我因该去修改 B 类的实现方法
实际上这本书没有说清楚，主类使用普通的接口，就可以完成 Main 不修改，修改 B 类实现方法的功能
而现在，业务更加复杂了
我也描述不出来是什么场景，我真的描述不出来
就是说，真正的业务实现过程，不在 Impl 类里面了，而是抽象类里面
要改呢，就直接去改抽象类，我真没想到有啥意义

2，当然了，我自己完不成的事情，我可以委托别人去完成
我们熟悉的 Controller 和 Service 就是典型的适配器模式，Controller 就是 Service 适配器
我觉得这种适配器没啥大意思，基本上都在用

适配器模式在什么时候会用到？
1，已经有完善的代码逻辑了
2，“只需要稍微改一下代码即可”
3，版本升级的时候
一般来说，这种情况，都会使用委托适配器模式


 */